Registration/Approval/Email/Password change system

1. New user signs up and member object is created and awaits approval by site admin

User creates a new member object by filling out form at either register_member.html or register_coach.html

These pages are served and various data is populated (through context dictionary) via new_member_display and new_coach_display in public/views.py

Both forms submit data to users/views.py. This file does not do a lot of work. It essentially just calls on functions found in users/models.py in order to validate the member credentials and place the new member into the db. Again, views.py does not actually DO these things - but it does call on the functions that do. 

First, it calls on users/models.py/new_member_validationjust checks for errors (by calling on a function contained in users/models.py) in the registration forms. If there are errors it reloads the page with error messages. If not errors in registration forms, it calls on functions that are contained in users/models.py in order to create a new member object. 

At this point, users/models.py does most of the heavy lifting. First, new_member_validation checks the credentials. Then, add_member adds the member object to the db, with all of its necessary attributes.   

Upon initial creation of a member object, and in addition to all the basic information (name, address, phone, instrument, rating, bio, etc) there are two booleans that are set to false; these are "is_approved" and "is_reviewed."  

users/models.py/generate_new_password creates a default/random password for each new member object. For security purposes, this password is not accessible by the site admin (IS THIS CORRECT? HOW DOES THE NEW MEMBER KNOW THEIR TEMP PASSWORD - IS IT SENT UNHASHED?). 

users/models.py/generate_new_token generates a token for each new member. This token allows the new member, after approval by the site admin, to access a page where they can change their temporary password to a permanent password. (I DON'T REALLY UNDERSTAND THIS STEP.) 

At this point, here is where a new member object stands.
*Data has been submitted via the reg forms
*The system has checked for errors and, if not errors, has created the new member object. 
*The system sends the email to site admin with member information, including temp password (AGAIN I AM NOT SURE ABOUT THIS).
*The member object also possesses a token allowing the member to change temp password to permanent password (IS THIS CORRECT?).
*The new member model now exists in the db, awaiting the site admin to take necessary action.

2. Approval process

Site admin receives the automatically-generated email, which basically says, "hey, you've got a new member: here are his/her credentials and here is his/her temp password." He considers this new member, then goes into the admin panel to check on "HAS BEEN VIEWED" and "HAS BEEN APPROVED".

Assuming he approves the member, he changes "Has been viewed" and "Has been approved" from "false" to "true". By this action, a series of events is set off... A boilerplate email is sent to the newly approved member (IS THIS DONE AUTOMATICALLY OR DOES MICHAEL DO IT MANUALLY?), saying something like, "Congrats! You have been approved to join Houston Chamber Music Network. Here is your temporary password. Please click on the link below, which will take you to a page where you will set your permanent password. From there you can log into and use the site." (IS THIS BASICALLY CORRECT?)

The newly-approved member clicks through to change his/her password, then logs in to the actual member's area of the site and goes about his/her merry way.

3. Password reset system

This is fairly straightforward, but important to understand given the changes Michael has proposed to the approval process.

If an established user tries to login and fails, they will get an error message: 'Username/Password combination not found, please try again or use the "Forgot Password" button below.' (This is found in users/models.py/validate_login.) 

They click on "Forgot password" button, which takes them to the url 'request-reset/' (public/urls.py). 

They enter their email and click on "Send reset email" (assuming their email was found in the db). The reset email is sent automatically and they are directed to 'reset-sent' (public/urls.py). 

They recieve the email with a token allowing them to access (??? WHAT PAGE/ROUTE?? I BELIEVE THIS IS THE SAME ROUTE THAT A NEW MEMBER TAKES BUT I AM NOT SURE). BASICALLY, I DON'T KNOW WHERE THE RESET PASSWORD PAGE IS, but once they successfully fill it out, they get 'new_pw_success' (public/urls.py) which invites them to login with their new password.







